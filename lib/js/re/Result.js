// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Words = require("./Words.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Belt_HashSetString = require("bs-platform/lib/js/belt_HashSetString.js");
var Text$BsReactNative = require("bs-react-native/lib/js/src/components/text.js");
var View$BsReactNative = require("bs-react-native/lib/js/src/components/view.js");
var Style$BsReactNative = require("bs-react-native/lib/js/src/style.js");
var StyleSheet$BsReactNative = require("bs-react-native/lib/js/src/styleSheet.js");

var component = ReasonReact.statelessComponent("Result");

var styles = StyleSheet$BsReactNative.create({
      view: Style$BsReactNative.style(/* :: */[
            Style$BsReactNative.padding(/* Pt */Block.__(0, [20])),
            /* :: */[
              Style$BsReactNative.width(/* Pct */Block.__(1, [100])),
              /* :: */[
                Style$BsReactNative.flex(1),
                /* :: */[
                  Style$BsReactNative.flexDirection(/* Row */0),
                  /* :: */[
                    Style$BsReactNative.flexWrap(/* Wrap */0),
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]),
      incorrectWord: Style$BsReactNative.style(/* :: */[
            Style$BsReactNative.margin(/* Pt */Block.__(0, [1.5])),
            /* :: */[
              Style$BsReactNative.color("#f66"),
              /* [] */0
            ]
          ]),
      correctWord: Style$BsReactNative.style(/* :: */[
            Style$BsReactNative.margin(/* Pt */Block.__(0, [1.5])),
            /* [] */0
          ])
    });

function make(text, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      var re = new RegExp("-");
      var toNormalizedWord = function (word) {
        return word.toLowerCase().replace(new RegExp("[.!?;,]", "g"), "");
      };
      var isCorrectWord = function (__x) {
        return Belt_HashSetString.has(Words.hashset, __x);
      };
      var isEveryCorrectWords = function (word) {
        var __x = word.split(re);
        return Belt_Array.every(__x, isCorrectWord);
      };
      var toAnsweredElements = function (word) {
        var __x = word.split(new RegExp("\\s"));
        return Belt_Array.mapWithIndex(__x, (function (i, word) {
                      var normalized_word = toNormalizedWord(word);
                      var match = +re.test(normalized_word);
                      var is_every_correct_words = match !== 0 ? isEveryCorrectWords(normalized_word) : Belt_HashSetString.has(Words.hashset, normalized_word);
                      if (is_every_correct_words !== 0) {
                        return ReasonReact.element(/* Some */[i.toString()], /* None */0, Text$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[styles.correctWord], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[word], /* array */[]));
                      } else {
                        return ReasonReact.element(/* Some */[i.toString()], /* None */0, Text$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[styles.incorrectWord], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[word], /* array */[]));
                      }
                    }));
      };
      return ReasonReact.element(/* None */0, /* None */0, View$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[styles.view], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* array */[toAnsweredElements(text)]));
    });
  return newrecord;
}

exports.component = component;
exports.styles = styles;
exports.make = make;
/* component Not a pure module */
